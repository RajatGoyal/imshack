<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				title="Personal Message" width="293" height="319" borderAlpha="1" showCloseButton="true"
			  layout="vertical" verticalScrollPolicy="off"	horizontalScrollPolicy="off"  paddingRight="20" initialize="onInit( event )" close="onCloseClick( event )" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:local="*">
	
	<mx:Script>
		<![CDATA[
			import com.yourpalmark.chat.ChatManager;
			import com.yourpalmark.chat.data.ChatRoom;
			import com.yourpalmark.chat.data.ChatUser;
			
			import flash.display.NativeWindowSystemChrome;
			import flash.utils.Timer;
			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import org.igniterealtime.xiff.core.UnescapedJID;
			import org.igniterealtime.xiff.data.Message;
			import org.igniterealtime.xiff.data.Presence;
			import org.igniterealtime.xiff.data.im.RosterItemVO;
			import org.igniterealtime.xiff.events.MessageEvent;
			
			
			private var i:int=1;
			public static var CLOSE:String = "close";
			public var videochatwindow:videoChat
			private var _tojid:UnescapedJID;
			private var _fromjid:UnescapedJID;
			private var ritem:RosterItemVO;
			private var timer:Timer;
			public function get toJID():UnescapedJID
			{
				return _tojid;
			

			}
			
			public function returnritem():RosterItemVO
			{
				return ritem;
			}
			
			public function refresh(e:TimerEvent):void
			{
				setToJID(_tojid);
			}
			public function set toJID( value:UnescapedJID ):void
			{
				_tojid = value;
				
			
				callLater( setToJID, [ value ] );
			}
			
			public function set fromJID( value:UnescapedJID ):void
			{
				_fromjid = value;
			}
			
			public function set userPresence( value:String ):void
			{
				//callLater( setPresence, [ value ] );
			}
			
			public function set userStatus( value:String ):void
			{
				//callLater( setStatus, [ value ] );
			}
			
			public function updateMessage( message:Message ):void
			{
				processmessage(message);
				if( message.state ) callLater( setState, [ message.state ] );
				
				if( message.body ) callLater( updateMessageDisplay, [ message.body, _tojid, message.time ] );
				
			/*	if( autoreplytext.text.length > 0 && autoreplytext.visible==true )
				{
					var message2:Message = new Message( _tojid.escaped, null, null, null, Message.TYPE_CHAT, null );
					message2.from = _fromjid.escaped;
					message2.body = autoreplytext.text;
					
					updateMessageDisplay( autoreplytext.text, _fromjid, message2.time );
					
					callLater( clearTypeArea );
					callLater( updateScrollPosition );
					
					var messageEvent2:MessageEvent = new MessageEvent();
					messageEvent2.data = message2;
					dispatchEvent( messageEvent2 );
				}
				*/
				Â //receiverLC.send("_myConnection", "playMC");
			}
		
			public function processmessage(message:Message):void{
				switch(message.body)
				{
					
				}
			}
			private function setToJID( jid:UnescapedJID ):void
			{
				
				//userJIDLabel.text = jid.toString();
				ritem = RosterItemVO.get( jid, false );
				userJIDLabel.text= ritem.displayName;
				callLater( setStatus, [ ritem.status.toString()] )
				callLater(setPresence, [ ritem.online.toString()] )
				if (ritem.online==true )
				{
					online.data="online.jpg"
				}
				else
				{
					online.data="offline.jpg"
					
				}
				if(ritem.show=="away")
				{
					online.data="idle.jpg"
				}
				if(ritem.show=="dnd"||ritem.show=="DND")
				{
					online.data="dnd.jpg"
				}
			}
			
			private function setPresence( presence:String ):void
			{
				userPresenceLabel.text = presence;
			}
			
			private function setStatus( status:String ):void
			{
				userStatusLabel.text = status;
			}
			
			private function setState( state:String ):void
			{
				userStateLabel.text = state;
			}
			
			private function updateMessageDisplay( message:String, jid:UnescapedJID, time:Date ):void
			{
				if( !time ) time = new Date();
				
				var hours:int = ( time.hours == 0 || time.hours == 12 ) ? 12 : time.hours > 12 ? time.hours - 12 : time.hours;
				var minutes:String = time.minutes.toString().length == 1 ? "0" + time.minutes.toString() : time.minutes.toString();
				messageTextArea.htmlText += "[" + hours.toString() + ":" + minutes + " | " + jid.bareJID + "] " + message;
				callLater( updateScrollPosition );
				
				if(userPresenceLabel.text=="false")
				{
					messageTextArea.htmlText += "chat cannot be sent , user is offline ";
					callLater( updateScrollPosition );

					
				}
				// receiverLC.send("_myConnection", "playMC");

			}
			
			private function updateScrollPosition():void
			{
				messageTextArea.verticalScrollPosition = messageTextArea.maxVerticalScrollPosition;
			}
			
			private function sendMessage():void
			{
				if( inputTextArea.text.length > 0 )
				{
					var message:Message = new Message( _tojid.escaped, null, null, null, Message.TYPE_CHAT, null );
					message.from = _fromjid.escaped;
					message.body = inputTextArea.text;
					
					updateMessageDisplay( inputTextArea.text, _fromjid, message.time );
					
					callLater( clearTypeArea );
					callLater( updateScrollPosition );
					
					var messageEvent:MessageEvent = new MessageEvent();
					messageEvent.data = message;
					dispatchEvent( messageEvent );
				}
				this.title="";
			}
			
			private function clearTypeArea():void
			{
				inputTextArea.text = "";
			}
			
			
			private function onInit( event:FlexEvent ):void
			{
				autoreplytext.visible=false;
				inputTextArea.addEventListener( FocusEvent.FOCUS_IN, onMessageFocusIn, false, 0, true );
				inputTextArea.addEventListener( FocusEvent.FOCUS_OUT, onMessageFocusOut, false, 0, true );
				timer= new Timer(5000);
				timer.addEventListener(TimerEvent.TIMER,refresh);
				timer.start();
				userimage.data=FlexGlobals.topLevelApplication.infoforpm;
				autoreply.addEventListener(MouseEvent.CLICK,autoreplyfunc);
				
			}
			
			private function autoreplyfunc(e:Event):void
			{
				if(autoreplytext.visible==true)
				{
					autoreplytext.visible=false;
				}	
				else
				{	autoreplytext.visible=true;
				}
				
			}
			
			private function onMessageFocusIn( event:FocusEvent ):void
			{
				inputTextArea.addEventListener( KeyboardEvent.KEY_DOWN, onMessageKeyDown );
			}
			
			private function onMessageFocusOut( event:FocusEvent ):void
			{
				inputTextArea.removeEventListener( KeyboardEvent.KEY_DOWN, onMessageKeyDown );
			}
			
			private function onMessageKeyDown( event:KeyboardEvent ):void
			{
				if( event.keyCode == Keyboard.ENTER )
				{
					sendMessage();
				}
			}
			
			private function onCloseClick( event:CloseEvent ):void
			{
				inputTextArea.removeEventListener( FocusEvent.FOCUS_IN, onMessageFocusIn );
				inputTextArea.removeEventListener( FocusEvent.FOCUS_OUT, onMessageFocusOut );
				inputTextArea.removeEventListener( KeyboardEvent.KEY_DOWN, onMessageKeyDown );
			}
			
			private function onSendClick( event:MouseEvent ):void
			{
				sendMessage();
			}
			
			public function randomNumber(low:Number=1, high:Number=100000000):Number
			{
				return Math.floor(Math.random() * (1+high-low)) + low;
			}

			

			protected function button1_clickHandler(event:MouseEvent):void
			{
				var voicechatwindow:voiceChat = new voiceChat();
				voicechatwindow.open();
				var location:String=randomNumber().toString();
				var message:Message = new Message( _tojid.escaped, null, null, null, Message.TYPE_CHAT, null );
				message.from = _fromjid.escaped;
				message.body =  userJIDLabel.text+"has requested for voice chat , click on the link to continue"+"  "+"http://voxli.com/"+location;
				var messageEvent:MessageEvent = new MessageEvent();
				messageEvent.data = message;
				dispatchEvent( messageEvent );
				this.title="Voice Chat request sent";
				
				
				voicechatwindow.htmlRenderer.location="http://voxli.com/"+location;
				
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				videochatwindow = new videoChat();
				videochatwindow.open();
				var location:String=randomNumber().toString();
				var message:Message = new Message( _tojid.escaped, null, null, null, Message.TYPE_CHAT, null );
				message.from = _fromjid.escaped;
				message.body =  userJIDLabel.text+"has requested for video chat , click on the link to continue"+"  "+"http://tinychat.com/"+location;
				var messageEvent:MessageEvent = new MessageEvent();
				messageEvent.data = message;
				dispatchEvent( messageEvent );
				this.title="Video Chat request sent";
				
				videochatwindow.htmlRenderer.location="http://tinychat.com/"+location;	
				
			}


			protected function button3_clickHandler(event:MouseEvent):void
			{
			/*	var ri:RosterItemVO=ritem;
				var desktopnotification:DesktopNotification= new DesktopNotification();
				desktopnotification.userPresence = ri.show;
				desktopnotification.userStatus = ri.status;
				desktopnotification.fromJID = chatManager.currentUser.jid;
				desktopnotification.toJID =  message.from.unescaped;
				desktopnotification.systemChrome=NativeWindowSystemChrome.NONE;
				desktopnotification.open();
				if( message )
				{
					desktopnotification.updateMessage( message );
				}*/
			}

		]]>
	</mx:Script>
	
		<mx:HBox width="261" height="89">
			<local:inforenderer id="userimage"  width="86" height="84"/>
			<mx:Spacer/>
			<mx:Grid width="157" height="89" >
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:Spacer/>
						<mx:Label id="userJIDLabel" text="" width="75" fontWeight="bold" />
						<mx:Image width="16" height="17" id="online"/>
						<mx:Spacer/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:Label id="userStateLabel" text="" width="100%" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="100%" height="100%">
						<mx:Label id="userStatusLabel" text="" fontWeight="bold" />
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>
		<mx:Label id="userPresenceLabel" visible="false" text="" width="69" fontWeight="bold" />
		<mx:HDividedBox width="258" horizontalScrollPolicy="off">
			<mx:Button label="Voxli Voice Chat" click="button1_clickHandler(event)" width="119" fontSize="10"/>
			<mx:Button label="TinyChat Video Chat" click="button2_clickHandler(event)" width="134" fontSize="9"/>
			<mx:Button label="AutoReply" textAlign="right" id="autoreply" visible="false" width="56"/>
			<mx:Button label="Stick on the Desktop" click="button3_clickHandler(event)"/>
		</mx:HDividedBox>
		<mx:TextInput id="autoreplytext"  width="254"/>
		<mx:TextArea id="messageTextArea" width="254" height="75"  borderStyle="inset" editable="false" />
		<mx:HBox width="252" horizontalScrollPolicy="off" height="29">
			<mx:TextArea id="inputTextArea" width="177" height="21" wordWrap="false" borderStyle="inset" editable="true" />
			<mx:Button id="sendButton" label="Send" click="onSendClick( event )"  width="64"/>
		</mx:HBox>
	
</mx:TitleWindow>